{
  "name": "extract-text-webpack-plugin",
  "version": "0.8.2",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "description": "Extract text from bundle into a file.",
  "peerDependencies": {
    "webpack": "^1.9.11"
  },
  "dependencies": {
    "async": "^1.2.1",
    "loader-utils": "~0.2.3"
  },
  "devDependencies": {
    "file-loader": "*",
    "style-loader": "*",
    "css-loader": "*",
    "webpack": "*"
  },
  "homepage": "http://github.com/webpack/extract-text-webpack-plugin",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/webpack/extract-text-webpack-plugin.git"
  },
  "license": "MIT",
  "readme": "# extract text plugin for webpack\r\n\r\n## Usage example with css\r\n\r\n``` javascript\r\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\r\nmodule.exports = {\r\n\tmodule: {\r\n\t\tloaders: [\r\n\t\t\t{ test: /\\.css$/, loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\") }\r\n\t\t]\r\n\t},\r\n\tplugins: [\r\n\t\tnew ExtractTextPlugin(\"styles.css\")\r\n\t]\r\n}\r\n```\r\n\r\nIt moves every `require(\"style.css\")` in entry chunks into a separate css output file. So your styles are no longer inlined into the javascript, but separate in a css bundle file (`styles.css`). If your total stylesheet volume is big, it will be faster because the stylesheet bundle is loaded in parallel to the javascript bundle.\r\n\r\nAdvantages:\r\n\r\n* Fewer style tags (older IE has a limit)\r\n* CSS SourceMap (with `devtool: \"sourcemap\"` and `css-loader?sourceMap`)\r\n* CSS requested in parallel\r\n* CSS cached separate\r\n* Faster runtime (less code and DOM operations)\r\n\r\nCaveats:\r\n\r\n* Additional HTTP request\r\n* Longer compilation time\r\n* Complexer configuration\r\n* No runtime public path modification\r\n* No Hot Module Replacement\r\n\r\n## API\r\n\r\n``` javascript\r\nnew ExtractTextPlugin([id: string], filename: string, [options])\r\n```\r\n\r\n* `id` Unique ident for this plugin instance. (For advanded usage only, by default automatic generated)\r\n* `filename` the filename of the result file. May contain `[name]`, `[id]` and `[contenthash]`.\r\n  * `[name]` the name of the chunk\r\n  * `[id]` the number of the chunk\r\n  * `[contenthash]` a hash of the content of the extracted file\r\n* `options`\r\n  * `allChunks` extract from all additional chunks too (by default it extracts only from the initial chunk(s))\r\n  * `disable` disables the plugin\r\n\r\nThe `ExtractTextPlugin` generates an output file per entry, so you must use `[name]`, `[id]` or `[contenthash]` when using multiple entries.\r\n\r\n``` javascript\r\nExtractTextPlugin.extract([notExtractLoader], loader, [options])\r\n```\r\n\r\nCreates an extracting loader from a existing loader.\r\n\r\n* `notExtractLoader` (optional) the loader(s) that should be used when the css is not extracted (i. e. in a additional chunk when `allChunks: false`)\r\n* `loader` the loader(s) that should be used for converting the resource to a css exporting module.\r\n* `options`\r\n  * `publicPath` override the `publicPath` setting for this loader.\r\n\r\nThere is also a `extract` function on the instance. You should use this if you have more than one ExtractTextPlugin.\r\n\r\n## License\r\n\r\nMIT (http://www.opensource.org/licenses/mit-license.php)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/webpack/extract-text-webpack-plugin/issues"
  },
  "_id": "extract-text-webpack-plugin@0.8.2",
  "_shasum": "49309df325f53affc53972f711afba2360c1914c",
  "_resolved": "http://registry.npmjs.org/extract-text-webpack-plugin/-/extract-text-webpack-plugin-0.8.2.tgz",
  "_from": "extract-text-webpack-plugin@0.8.2"
}
