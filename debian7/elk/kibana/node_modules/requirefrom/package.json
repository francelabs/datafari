{
  "name": "requirefrom",
  "version": "0.2.0",
  "description": "Require from a directory relative to node_modules, flattening your require paths.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DSKrepps/requireFrom.git"
  },
  "keywords": [
    "requireFrom",
    "require",
    "relative",
    "path",
    "module",
    "dependency"
  ],
  "author": {
    "name": "Dylan Krepps",
    "email": "DSKrepps+requireFrom@gmail.com",
    "url": "https://github.com/DSKrepps"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/DSKrepps/requireFrom/issues"
  },
  "homepage": "https://github.com/DSKrepps/requireFrom",
  "readme": "## requireFrom\r\n\r\nRequire from a directory relative to node_modules, flattening your require paths. Using requireFrom you won't have to manage complex relative paths between each component of your node app.\r\n\r\n## Code Example\r\n\r\nSimple usage anywhere in your node app:\r\n````js\r\n    var lib = require('requirefrom')('lib');\r\n    var myModule = lib('myModule');\r\n````\r\n\r\nFor more complex usage, let's assume this example directory structure:\r\n\r\n    node_modules/\r\n    lib/\r\n      components/\r\n        framework/\r\n          veiws/\r\n            login.js\r\n            signup.js\r\n          models/\r\n            user/\r\n              index.js\r\n      utlity/\r\n        normalize/\r\n          user.js\r\n    package.json\r\n\r\nAny file in this project could then include these files with the following code:\r\n````js\r\nvar\r\n    requireFrom = require('requirefrom')\r\n  , views = requireFrom('lib/components/framework/views/')\r\n  , models = requireFrom('lib/components/framework/models/')\r\n  , utility = requireFrom('lib/utility/')\r\n\r\n  , loginForm = views('login.js')\r\n  , signupForm = views('signup.js')\r\n\r\n  , userModel = models('user')\r\n\r\n  , normalizeUser = utility('normalize/user.js')\r\n````\r\n\r\nWithout requireFrom, each file would need to maintain paths relative each other file, for example:\r\n````js\r\nvar\r\n    loginForm = require('../../framework/views/login.js')\r\n  , signupForm = require('../../framework/views/signup.js')\r\n\r\n  , userModel = require('../../framework/models/user')\r\n\r\n  , normalizeUser = require('../../../utlity/normalize/user.js')\r\n````\r\n\r\n\r\n\r\n## Motivation\r\n\r\nThere hasn't been a conlusive method to prevent relative path complexity. You can read about them [here](https://gist.github.com/branneman/8048520). Each method either pollutes global, damages portablity of your app, or might confuse someone unfamiliar with your technique. I hadn't seen anyone considering requireFrom's method of using a dependency to find the relative path of your project.\r\n\r\n## Installation\r\n\r\nInstall using npm. Add \"requirefrom\" to your dependencies in package.json before running `npm install`, or do that automatically with `npm install --save requirefrom`.",
  "readmeFilename": "readme.md",
  "_id": "requirefrom@0.2.0",
  "_shasum": "fbb24447c65657fe0eb2e6b14fdc83ee2fb22ec2",
  "_from": "requirefrom@0.2.0",
  "_resolved": "http://registry.npmjs.org/requirefrom/-/requirefrom-0.2.0.tgz"
}
