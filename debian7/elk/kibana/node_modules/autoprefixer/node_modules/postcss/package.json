{
  "name": "postcss",
  "version": "4.0.6",
  "description": "Tool for transforming CSS with JS plugins",
  "keywords": [
    "css",
    "postproccessor",
    "parser",
    "source map",
    "transform",
    "manipulation",
    "preprocess",
    "transpiler"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss.git"
  },
  "dependencies": {
    "source-map": "~0.2.0",
    "js-base64": "~2.1.7"
  },
  "devDependencies": {
    "concat-with-sourcemaps": "1.0.0",
    "gulp-bench-summary": "0.1.0",
    "gulp-json-editor": "2.2.1",
    "jshint-stylish": "1.0.0",
    "gulp-jshint": "1.9.2",
    "gonzales-pe": "3.0.0-26",
    "browserify": "9.0.3",
    "gulp-babel": "4.0.0",
    "gulp-bench": "1.1.0",
    "gulp-mocha": "2.0.0",
    "node-sass": "2.0.1",
    "gulp-util": "3.0.3",
    "execSync": "1.0.2",
    "fs-extra": "0.16.3",
    "gonzales": "1.0.7",
    "through2": "0.6.3",
    "stylecow": "4.2.4",
    "request": "2.53.0",
    "cssnext": "1.0.1",
    "rework": "1.0.1",
    "mensch": "0.3.1",
    "stylus": "0.50.0",
    "mocha": "2.1.0",
    "cssom": "0.3.0",
    "gulp": "3.8.11",
    "less": "2.4.0",
    "chai": "2.1.0",
    "babel": "4.4.6"
  },
  "scripts": {
    "test": "gulp"
  },
  "main": "lib/postcss",
  "readme": "# PostCSS [![Build Status](https://travis-ci.org/postcss/postcss.svg)](https://travis-ci.org/postcss/postcss) [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/postcss/postcss?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n<img align=\"right\" width=\"95\" height=\"95\" src=\"http://postcss.github.io/postcss/logo.svg\" title=\"Philosopher’s stone, logo of PostCSS\">\n\nPostCSS is a tool for transforming CSS with JS plugins. The growing ecosystem\nof PostCSS plugins can add vendor prefixes, support variables and mixins,\ntranspile future CSS syntax, inline images, and more.\n\nPostCSS is used by Google, Twitter, Alibaba, and Shopify.\nIts most popular plugin, [Autoprefixer], is one of the most universally\npraised CSS processors available.\n\nPostCSS can do the same work as preprocessors like Sass, Less, and Stylus.\nBut PostCSS is modular, 4-40x faster, and much more powerful.\n\nPostCSS itself is very small. It includes only a CSS parser,\na CSS node tree API, a source map generator, and a node tree stringifier.\nAll CSS transformations are encapsulated in modular plugins. And these plugins\nare themselves small plain JS functions, which receive a CSS node tree,\napply transformations to it, and return a modified tree.\n\nYou can use the [cssnext] plugin pack and write future CSS code right now:\n\n```css\n:root {\n    --row: 1rem;\n    --mainColor: #ffbbaaff;\n}\n\n@custom-media --mobile (width <= 640px);\n\n@custom-selector --heading h1, h2, h3, h4, h5, h6;\n\n.post-article --heading {\n    margin-top: calc(10 * var(--row));\n    color: color(var(--mainColor) blackness(+20%));\n    font-variant-caps: small-caps;\n}\n@media (--mobile) {\n    .post-article --heading {\n        margin-top: 0;\n    }\n}\n```\n\nOr if you like the power provided by preprocessors like Sass,\nyou could combine [postcss-nested], [postcss-mixins], [postcss-easings]\nand [postcss-media-minmax]:\n\n```css\n$mobile: width <= 640px;\n\n@define-mixin social-icon $color {\n    background: $color;\n    &:hover {\n        background: color($color whiteness(+10%));\n    }\n}\n\n.social-icon {\n    transition: background 200ms ease-in-sine;\n    &.is-twitter {\n        @mixin social-icon #55acee;\n    }\n    &.is-facebook {\n        @mixin social-icon #3b5998;\n    }\n}\n\n.post-article {\n    padding: 10px 5px;\n    @media ($mobile) {\n        padding: 0;\n    }\n}\n```\n\nTwitter account for articles, releases, and new plugins: [@postcss].\nWeibo account: [postcss].\n\n<a href=\"https://evilmartians.com/?utm_source=postcss\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[@postcss]:     https://twitter.com/postcss\n[postcss]:      http://weibo.com/postcss\n\n## How PostCSS differs from Preprocessors\n\nSass, Less and Stylus provide specialized languages that you can use to write\nCSS templates. These languages and their compilers are defined together\nin large codebases. Tools and libraries for preprocessors must work within\neach preprocessor’s limitations: usually they can only offer sets\nof pre-defined mixins, functions, and variables.\n\nIn contrast, PostCSS provides a simple API that modular plugins can use\nto understand, transform, and create CSS. PostCSS plugins, therefore,\ncan be created, maintained, and implemented independently. And they can perform\nmany different tasks, not just compile special syntaxes to CSS.\nEach plugin does one thing well.\n\n## Features\n\n### Modularity\n\nWithout any plugins, PostCSS will parse your CSS and stringify it back\nto you without changing a single byte. All of the processing that enables\nspecial features and syntax in your stylesheets is made possible\nby PostCSS plugins, which are nothing more than JS functions.\n\nBecause each PostCSS plugin is an independent module, different plugins can take\ndifferent approaches. This flexibility allows plugin authors to create whatever\nfeatures they can imagine, while empowering PostCSS users to add only\nthose features that they want to their workflow.\n\nSome plugins, like [postcss-custom-properties], [postcss-media-minmax],\nand [postcss-calc], implement syntax from present and future W3C specs,\ntranspiling it to cross-browser-compatible output. Other plugins,\nlike [postcss-mixins] and [postcss-simple-extend], add new powers\nto your stylesheets that are not yet part of any spec. With PostCSS,\nyou can decide for yourself which plugins match your own needs and preferences.\n\nAnother advantage of PostCSS’s modularity is that anybody can contribute easily\nto the PostCSS ecosystem. Plugins are simple npm packages;\nso there are no barriers to writing your own plugins, or contributing ideas\nand bug fixes to the plugins that you use.\n\n### Perfomance\n\nPostCSS is one of the fastest CSS parsers written in JS. (Only [CSSOM] is\nfaster, and only because it is less accurate.) So PostCSS will read your CSS\nand apply transformations faster than any other stylesheet processor out there.\n\nIf you use Ruby Sass now, PostCSS could significantly improve your development\nprocess: PostCSS processing is *40 times faster* than Ruby Sass compilation.\nAnd even if you throw in the entire [cssnext] plugin pack, PostCSS,\nwritten in JS, is still *4 times faster* than [libsass], written on C++.\n\n[libsass]: https://github.com/sass/libsass\n[CSSOM]:   https://github.com/NV/CSSOM\n\n### Powerful Tools\n\nPostCSS plugins can read and rebuild an entire CSS node tree. With this power,\nplugin authors are able to create tools that would be impossible\nto build into preprocessors (like [Autoprefixer]).\n\nPostCSS-powered tools can do much more than transform special syntax into\nbrowser-friendly CSS. PostCSS plugin authors have built linters\n(like [doiuse] and [postcss-bem-linter]), code review tools\n(like [list-selectors]), and minifiers (like [csswring]).\nWith [postcss-data-packer], you can create a cacheable “sprite”\nby moving all `data:uri` values to separate file.\n\nOne unique example of PostCSS’s power is [RTLCSS]. As you know,\nin Arabic and Hebrew, writing moves from right-to-left (RTL), instead\nof the more widespread left-to-right convention. Because a language’s\ndirectionality affects its readers’ perspective, an international site’s layout\nneeds to change for RTL users, not just its text. (Check out [Arabic Wikipedia]\nas an example.) The [RTLCSS] plugin effectively “mirrors” your stylesheet\nby swapping `left` and `right`, changing the value order in `margin` shorthands,\nand more.\n\n[Arabic Wikipedia]: https://ar.wikipedia.org/wiki/%D9%84%D8%BA%D8%A9_%D8%B9%D8%B1%D8%A8%D9%8A%D8%A9\n\n### Use the CSS of the Future\n\nCSS3 added valuable features, but some of them are not yet available in all\nof the browsers that developers need to support. And exciting future CSS modules\nare being drafted now — some even implemented in cutting-edge browsers —\nthat will not be widely available for quite a while. But PostCSS plugins\ncan allow us to write this CSS of the future, then transpile it to code usable\nin all the browsers we must support.\n\n[Autoprefixer] exemplifies this power: you write spec-compliant, future-friendly\nCSS, pretending that vendor prefixes don’t exist, and it does the dirty work\nof inserting the prefixes you’ll need. All of the plugins bundled into [cssnext]\ndo similar work, allowing authors to use syntax and functions\nfrom the latest W3C specs without worrying about the fallbacks they’ll need.\n\nAs more CSS specs are drafted, more PostCSS plugins will be written. Users will\nbe able to write stylesheets using standard, interoperable syntax, instead of\na specialized language for a specialized tool (as with preprocessors).\n\n## Quick Start\n\n1. Implement PostCSS with your build tool of choice. See the PostCSS [Grunt],\n   [Gulp], and [webpack] plugins more detailed instructions.\n2. Select plugins from the list below and add them to your PostCSS process.\n3. Make awesome products.\n\n[webpack]: https://github.com/postcss/postcss-loader\n[Grunt]:   https://github.com/nDmitry/grunt-postcss\n[Gulp]:    https://github.com/w0rm/gulp-postcss\n\n## Plugins Packs\n\n* [cssnext] contains plugins that allow you to use future CSS features today.\n* [ACSS] contains plugins that transform your CSS according\n  to special annotation comments.\n\n[cssnext]:  https://github.com/putaindecode/cssnext\n[ACSS]:     https://github.com/morishitter/acss\n\n## Plugins\n\n### Future CSS Syntax\n\n* [postcss-color-function] supports functions to transform colors.\n* [postcss-color-gray] supports the `gray()` function.\n* [postcss-color-hex] transforms `rgb()` and `rgba()` to hex.\n* [postcss-color-hex-alpha] supports `#rrggbbaa` and `#rgba` notation.\n* [postcss-color-hwb] transforms `hwb()` to widely compatible `rgb()`.\n* [postcss-color-rebeccapurple] supports the `rebeccapurple` color.\n* [postcss-custom-media] supports custom aliases for media queries.\n* [postcss-custom-properties] supports variables, using syntax from\n  the W3C Custom Properties.\n* [postcss-custom-selectors] adds custom aliases for selectors.\n* [postcss-font-variant] transpiles human-readable `font-variant` to more widely\n  supported CSS.\n* [postcss-host] makes the Shadow DOM’s `:host` selector work properly\n  with pseudo-classes.\n* [postcss-media-minmax] adds `<=` and `=>` statements to media queries.\n* [mq4-hover-shim] supports the `@media (hover)` feature.\n\n### Fallbacks\n\n* [postcss-epub] adds the `-epub-` prefix to relevant properties.\n* [postcss-opacity] adds opacity filter for IE8.\n* [postcss-vmin] generates `vm` fallback for `vmin` unit in IE9.\n* [postcss-will-change] inserts 3D hack before `will-change` property.\n* [Autoprefixer] adds vendor prefixes for you, using data from Can I Use.\n* [cssgrace] provides various helpers and transpiles CSS3 for IE\n  and other old browsers.\n* [pixrem] generates pixel fallbacks for `rem` units.\n* [pleeease-filters] converts WebKit filters to SVG filters,\n  for cross-browser compatibility.\n\n### Language Extensions\n\n* [postcss-mixins] enables mixins more powerful than Sass’s,\n  defined within stylesheets or in JS.\n* [postcss-nested] unwraps nested rules, as Sass does.\n* [postcss-simple-extend] supports extending of silent classes,\n  like Sass’s `@extend`.\n* [postcss-simple-vars] supports for Sass-style variables.\n* [csstyle] adds components workflow to your styles.\n\n### Optimizations\n\n* [postcss-assets] allows you to simplify URLs, insert image dimensions,\n  and inline files.\n* [postcss-calc] reduces `calc()` to values\n  (when expressions involve the same units).\n* [postcss-data-packer] moves embedded Base64 data out of the stylesheet\n  and into a separate file.\n* [postcss-import] inlines the stylesheets referred to by `@import` rules.\n* [postcss-url] rebases or inlines `url()`s.\n* [csswring] is a CSS minifier.\n* [css-byebye] removes the CSS rules that you don’t want.\n* [css-mqpacker] joins matching CSS media queries into a single statement.\n* [webpcss] adds URLs for WebP images, so they can be used by browsers\n  that support WebP.\n\n### Shortcuts\n\n* [postcss-easings] replaces easing names from easings.net\n  with `cubic-bezier()` functions.\n* [postcss-size] adds a `size` shortcut that sets width and height\n  with one declaration.\n\n### Others\n\n* [postcss-brand-colors] inserts company brand colors\n  in the `brand-colors` module.\n* [postcss-color-palette] transforms CSS2 color keywords to a custom palette.\n* [postcss-single-charset] ensures that there is one\n  and only one `@charset` rule at the top of file.\n* [rtlcss] mirrors styles for right-to-left locales.\n\n### Analysis\n\n* [postcss-bem-linter] lints CSS for conformance to SUIT CSS methodology.\n* [css2modernizr] creates a Modernizr config file\n  that requires only the tests that your CSS uses.\n* [doiuse] lints CSS for browser support, using data from Can I Use.\n* [list-selectors] lists and categorizes the selectors used in your CSS,\n  for code review and analysis.\n\n[postcss-color-rebeccapurple]: https://github.com/postcss/postcss-color-rebeccapurple\n[postcss-custom-properties]:   https://github.com/postcss/postcss-custom-properties\n[postcss-custom-selectors]:    https://github.com/postcss/postcss-custom-selectors\n[postcss-color-hex-alpha]:     https://github.com/postcss/postcss-color-hex-alpha\n[postcss-color-function]:      https://github.com/postcss/postcss-color-function\n[postcss-single-charset]:      https://github.com/hail2u/postcss-single-charset\n[postcss-color-palette]:       https://github.com/zaim/postcss-color-palette\n[postcss-simple-extend]:       https://github.com/davidtheclark/postcss-simple-extend\n[postcss-media-minmax]:        https://github.com/postcss/postcss-media-minmax\n[postcss-custom-media]:        https://github.com/postcss/postcss-custom-media\n[postcss-brand-colors]:        https://github.com/postcss/postcss-brand-colors\n[postcss-font-variant]:        https://github.com/postcss/postcss-font-variant\n[postcss-will-change]:         https://github.com/postcss/postcss-will-change\n[postcss-simple-vars]:         https://github.com/postcss/postcss-simple-vars\n[postcss-data-packer]:         https://github.com/Ser-Gen/postcss-data-packer\n[postcss-bem-linter]:          https://github.com/necolas/postcss-bem-linter\n[postcss-color-gray]:          https://github.com/postcss/postcss-color-gray\n[postcss-color-hex]:           https://github.com/TrySound/postcss-color-hex\n[postcss-color-hwb]:           https://github.com/postcss/postcss-color-hwb\n[pleeease-filters]:            https://github.com/iamvdo/pleeease-filters\n[postcss-easings]:             https://github.com/postcss/postcss-easings\n[postcss-opacity]:             https://github.com/iamvdo/postcss-opacity\n[postcss-assets]:              https://github.com/borodean/postcss-assets\n[postcss-import]:              https://github.com/postcss/postcss-import\n[postcss-nested]:              https://github.com/postcss/postcss-nested\n[postcss-mixins]:              https://github.com/postcss/postcss-mixins\n[mq4-hover-shim]:              https://github.com/twbs/mq4-hover-shim\n[list-selectors]:              https://github.com/davidtheclark/list-selectors\n[css2modernizr]:               https://github.com/vovanbo/css2modernizr\n[Autoprefixer]:                https://github.com/postcss/autoprefixer\n[css-mqpacker]:                https://github.com/hail2u/node-css-mqpacker\n[postcss-epub]:                https://github.com/Rycochet/postcss-epub\n[postcss-calc]:                https://github.com/postcss/postcss-calc\n[postcss-size]:                https://github.com/postcss/postcss-size\n[postcss-host]:                https://github.com/vitkarpov/postcss-host\n[postcss-vmin]:                https://github.com/iamvdo/postcss-vmin\n[postcss-url]:                 https://github.com/postcss/postcss-url\n[css-byebye]:                  https://github.com/AoDev/css-byebye\n[cssgrace]:                    https://github.com/cssdream/cssgrace\n[csswring]:                    https://github.com/hail2u/node-csswring\n[csstyle]:                     https://github.com/geddski/csstyle\n[webpcss]:                     https://github.com/lexich/webpcss\n[rtlcss]:                      https://github.com/MohammadYounes/rtlcss\n[RTLCSS]:                      https://github.com/MohammadYounes/rtlcss\n[pixrem]:                      https://github.com/robwierzbowski/node-pixrem\n[doiuse]:                      https://github.com/anandthakker/doiuse\n\n## Usage\n\n### JavaScript API\n\n```js\nvar postcss   = require('postcss');\nvar processor = postcss([require('cssnext'), require('cssgrace')]);\n\nvar result = processor.process(css, { from: 'app.css', to: 'app.out.css' });\nconsole.log(result.css);\n```\n\nRead the [postcss function], [processor], and [Result] API docs for more details.\n\n[postcss function]: https://github.com/postcss/postcss/blob/master/API.md#postcss-function\n[processor]:        https://github.com/postcss/postcss/blob/master/API.md#postcss-class\n[Result]:           https://github.com/postcss/postcss/blob/master/API.md#result-class\n\n### Source Maps\n\nPostCSS has great [source maps] support. It can read and interpret maps\nfrom previous transformation steps, autodetect the format that you expect,\nand output both external and inline maps.\n\nTo ensure that you generate an accurate source map, you must indicate the input\nand output CSS files paths — using the options `from` and `to`, respectively.\n\nTo generate a new source map with the default options, simply set `map: true`.\nThis will generate an inline source map that contains the source content.\nIf you don’t want the map inlined, you can use set `map.inline: false`.\n\n```js\nvar result = processor.process(css, {\n    from: 'main.css',\n    to:   'main.out.css',\n    map: { inline: false },\n});\n\nresult.map //=> '{\"version\":3,\"file\":\"main.out.css\",\"sources\":[\"main.css\"],\"names\":[],\"mappings\":\"AAAA,KAAI\"}'\n```\n\nIf PostCSS finds source maps from a previous transformation,\nit will automatically update that source map with the same options.\n\n```js\n// main.sass.css has an annotation comment with a link to main.sass.css.map\nvar result = minifier.process(css, { from: 'main.sass.css', to: 'main.min.css' });\nresult.map //=> Source map from main.sass to main.min.css\n```\n\nIf you want more control over source map generation, you can define the `map`\noption as an object with the following parameters:\n\n* `inline` boolean: indicates that the source map should be embedded\n  in the output CSS as a Base64-encoded comment. By default it is `true`.\n  But if all previous maps are external, not inline, PostCSS will not embed\n  the map even if you do not set this option.\n\n  If you have an inline source map, the `result.map` property will be empty,\n  as the source map will be contained within the text of `result.css`.\n\n* `prev` string, object or boolean: source map content from\n  a previous processing step (for example, Sass compilation).\n  PostCSS will try to read the previous source map automatically\n  (based on comments within the source CSS), but you can use this option\n  to identify it manually. If desired, you can omit the previous map\n  with `prev: false`.\n\n* `sourcesContent` boolean: indicates that PostCSS should set the origin\n  content (for example, Sass source) of the source map. By default it is `true`.\n  But if all previous maps do not contain sources content, PostCSS will also\n  leave it out even if you do not set this option.\n\n* `annotation` boolean or string: indicates that PostCSS should add annotation\n  comments to the CSS. By default, PostCSS will always add a comment with a path\n  to the source map. But if the input CSS does not have any annotation\n  comment, PostCSS will omit it, too, even if you do not set this option.\n\n  By default, PostCSS presumes that you want to save the source map as\n  `opts.to + '.map'` and will use this path in the annotation comment.\n  But you can set another path by providing a string value for `annotation`.\n\n  If you have set `inline: true`, annotation cannot be disabled.\n\n[source maps]: http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\n\n### Safe Mode\n\nIf you provide a `safe: true` option to the `process` or `parse` methods,\nPostCSS will try to correct any syntax errors that it finds in the CSS.\n\n```js\npostcss.parse('a {');                 // will throw \"Unclosed block\"\npostcss.parse('a {', { safe: true }); // will return CSS root for a {}\n```\n\nThis is useful for legacy code filled with hacks. Another use-case\nis interactive tools with live input — for example,\nthe [Autoprefixer demo](http://jsfiddle.net/simevidas/udyTs/show/light/).\n\n## How to Develop PostCSS Plugin\n\n* [PostCSS API](https://github.com/postcss/postcss/blob/master/API.md)\n* [Plugin Boilerplate](https://github.com/postcss/postcss-plugin-boilerplate)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/postcss/issues"
  },
  "homepage": "https://github.com/postcss/postcss#readme",
  "_id": "postcss@4.0.6",
  "_shasum": "1bd1e8a99f73efdb46d11bf5c206079e2d306538",
  "_resolved": "http://registry.npmjs.org/postcss/-/postcss-4.0.6.tgz",
  "_from": "postcss@>=4.0.6 <4.1.0"
}
