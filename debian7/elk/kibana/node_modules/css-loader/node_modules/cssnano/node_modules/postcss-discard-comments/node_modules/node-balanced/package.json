{
  "name": "node-balanced",
  "version": "0.0.14",
  "description": "balanced string matching, and replacing.",
  "main": "index.js",
  "scripts": {
    "test": "grunt test"
  },
  "author": {
    "name": "Chad Scira",
    "email": "chadvscira@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/icodeforlove/node-balanced.git"
  },
  "license": "MIT",
  "devDependencies": {
    "vows": "~0.7.0",
    "grunt": "~0.4.5",
    "webpack": "~1.3.2-beta9",
    "webpack-dev-server": "~1.4.7",
    "grunt-webpack": "~1.0.7",
    "grunt-contrib-uglify": "~0.5.1",
    "grunt-banner": "~0.2.3",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-jasmine-node": "~0.2.1",
    "grunt-cli": "~0.1.13"
  },
  "readme": "# Balanced [![Build Status](https://travis-ci.org/icodeforlove/node-balanced.png?branch=master)](https://travis-ci.org/icodeforlove/node-balanced)\n\nbalanced string matching, and replacing.\n\n# install\n\n```\nnpm install node-balanced\n```\n\n## example time\n\nlets say you have\n\n```css\n{\n\t@hello 1 {\n\t\ta {\n\t\t}\n\t}\n\t@hello 2 {\n\t\ta {\n\t\t}\n\t}\n\t@hello 3 {\n\t\ta {\n\t\t}\n\t}\n}\n```\n\nand you would like to replace the @hello block easily, balanced allows you to do this\n\n```javascript\nvar balanced = require('node-balanced');\n\nbalanced.replacements({\n\tsource: source,\n\thead: /@hello \\d \\{/, // optional (defalut: open)\n\topen: '{',\n\tclose: '}',\n\tbalance: false, // optional (default: false)\n\texceptions: false, // optional (default: false)\n\treplace: function (source, head, tail) {\n\t\treturn head + source + tail;\n\t}\n});\n```\n\nthis is a simple and efficient way to make balanced replacements, without a parser.\n\n## matching\n\nyou can get balanced matches by doing the following\n\n```javascript\nvar balanced = require('node-balanced');\n\nbalanced.matches({\n\tsource: source,\n\thead: /@hello \\d \\{/, // optional (defalut: open)\n\topen: '{',\n\tclose: '}',\n\tbalance: false, // optional (default: false) when set to true it will return `null` when there is an error\n\texceptions: false // optional (default: false),\n\tignore: [] // array of ignore ranges/matches\n});\n```\n\n## multiple head/open/close\n\nyou can match multiple head/open/close efficiently by doing this\n\n```javascript\nvar isBalanced = balanced.matches({\n\tsource: '{[({)]}}',\n\topen: ['{', '[', '('],\n\tclose: ['}', ']', ')'],\n\tbalance: true\n});\n```\n## ignore\nignore is supported by the `matches` and `replacements` methods, this is very useful for something like not matching inside of comments\n\n```\nvar blockComments = balanced.matches({source: source, open: '/*', close: '*/'}),\n\tsingleLineComments = balanced.getRangesForMatch(source, /^\\s*\\/\\/.+$/gim);\n\nbalanced.matches({\n\tsource: source,\n\thead: /@hello \\d \\{/,\n\topen: '{',\n\tclose: '}',\n\tignore: Array.prototype.concat.call([], blockComments, singleLineComments),\n\treplace: function (source, head, tail) {\n\t\treturn head + source + tail;\n\t}\n});\n```\n\n## advanced\n\nin this example we have code and we want to avoid replacing text thats inside of the multiline/singleline comments, and quotes\n\n```css\n{\n\t@hello 1 {\n\t\ta {\n\t\t}\n\t}\n/*\n\t@hello 2 {\n\t\ta {\n\t\t}\n\t}\n*/\n\t@hello 3 {\n\t\ta {\n\t\t}\n\t}\n// @hello 4 {}\n}\n\nvar hello = \"@hello 5 {}\";\n```\n\nwith balanced you can do this\n\n```javascript\n\t// returns quote ranges with option ignore filter\n\tfunction getQuoteRanges (string, ignore) {\n\t\tvar quotes = balanced.getRangesForMatch(string, new RegExp('\\'|\"', 'g'));\n\t\t\n\t\t// filter out ingored ranges\n\t\tif (ignore) {\n\t\t\tquotes = balanced.rangesWithout(quotes, ignore);\n\t\t}\n\n\t\tvar currect = null,\n\t\t\tranges = [];\n\t\n\t\tquotes.forEach(function (quote) {\n\t\t\tif (currect && currect.match === quote.match) {\n\t\t\t\t\tranges.push({\n\t\t\t\t\t\tindex: currect.index,\n\t\t\t\t\t\tlength: quote.index - currect.index + 1\n\t\t\t\t\t});\n\t\t\t\t\tcurrect = null;\n\t\t\t} else if (!currect) {\n\t\t\t\tcurrect = quote;\n\t\t\t}\n\t\t});\n\n\t\treturn ranges;\n\t}\n\n\tvar blockComments = balanced.matches({source: string, open: '/*', close: '*/'}),\n\t\tsingleLineComments = balanced.getRangesForMatch(string, /^\\s*\\/\\/.+$/gim),\n\t\tignores = Array.prototype.concat.call([], blockComments, singleLineComments),\n\t\tquotes = getQuoteRanges(string, ignores);\n\n\t// remove ignores inside of quotes\n\tignores = balanced.rangesWithout(ignores, quotes);\n\n\t// optional ignore code inside of quotes\n\tignores = ignores.concat(quotes);\n\t\n\t// run your matches or replacements method\n\tbalanced.matches({\n\t\tsource: string,\n\t\thead: /@hello \\d \\{/,\n\t\topen: '{',\n\t\tclose: '}',\n\t\tignore: ignores\n\t});\n```\n\nas you can see by using these principles you can accomplish this kind of stuff easily",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/icodeforlove/node-balanced/issues"
  },
  "homepage": "https://github.com/icodeforlove/node-balanced#readme",
  "_id": "node-balanced@0.0.14",
  "_shasum": "a33c727857d3044f1e88be72dd7d9a9d0b4fc21f",
  "_resolved": "http://registry.npmjs.org/node-balanced/-/node-balanced-0.0.14.tgz",
  "_from": "node-balanced@0.0.14"
}
