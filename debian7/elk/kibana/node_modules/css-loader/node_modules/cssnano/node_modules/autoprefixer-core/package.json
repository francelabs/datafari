{
  "name": "autoprefixer-core",
  "version": "5.2.1",
  "description": "CLI-less core of Autoprefixer to use in plugins",
  "keywords": [
    "autoprefixer",
    "css",
    "prefix",
    "postcss",
    "postcss-plugin"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/autoprefixer-core.git"
  },
  "dependencies": {
    "browserslist": "~0.4.0",
    "num2fraction": "^1.1.0",
    "caniuse-db": "^1.0.30000214",
    "postcss": "~4.1.12"
  },
  "devDependencies": {
    "vinyl-source-stream": "1.1.0",
    "gulp-json-editor": "2.2.1",
    "gulp-replace": "0.5.3",
    "gulp-eslint": "0.14.0",
    "gulp-coffee": "2.3.1",
    "gulp-mocha": "2.1.2",
    "browserify": "10.2.4",
    "fs-extra": "0.20.0",
    "should": "7.0.1",
    "mocha": "2.2.5",
    "gulp": "3.9.0",
    "coffee-script": "1.9.3"
  },
  "scripts": {
    "test": "gulp"
  },
  "main": "lib/autoprefixer",
  "readme": "# Autoprefixer Core [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"94\" height=\"71\"\n     src=\"http://postcss.github.io/autoprefixer/logo.svg\"\n     title=\"Autoprefixer logo by Anton Lovchikov\">\n\n[PostCSS] plugin to parse CSS and add vendor prefixes using values\nfrom [Can I Use].\n\nThis is core package to build Autoprefixer plugin for some environment\n(like [grunt‑autoprefixer]). For end-user documentation, features\nand plugins list visit [main Autoprefixer] project.\n\n<a href=\"https://evilmartians.com/?utm_source=autoprefixer-core\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[grunt‑autoprefixer]: https://github.com/nDmitry/grunt-autoprefixer\n[main Autoprefixer]:  https://github.com/postcss/autoprefixer\n[Can I Use]:          http://caniuse.com/\n[PostCSS]:            https://github.com/postcss/postcss\n[ci-img]:             https://travis-ci.org/postcss/autoprefixer-core.svg\n[ci]:                 https://travis-ci.org/postcss/autoprefixer-core\n\n## Quick Example\n\nWrite your CSS rules without vendor prefixes (in fact, forget about them\nentirely):\n\n```css\n:fullscreen a {\n    display: flex\n}\n```\n\nProcess your CSS by Autoprefixer:\n\n```js\nvar autoprefixer = require('autoprefixer-core');\nvar postcss      = require('postcss');\n\npostcss([ autoprefixer ]).process(css).then(function (result) {\n    result.warnings().forEach(function (warn) {\n        console.warn(warn.toString());\n    });\n    console.log(result.css);\n});\n```\n\nIt will use the data based on current browser popularity and property support\nto apply prefixes for you:\n\n```css\n:-webkit-full-screen a {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex\n}\n:-moz-full-screen a {\n    display: flex\n}\n:-ms-fullscreen a {\n    display: -ms-flexbox;\n    display: flex\n}\n:fullscreen a {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n```\n\n## Usage\n\nTo process your CSS you need to make 3 steps:\n\n1. Build plugin for your options and browsers supported in your project.\n2. Add this plugin to PostCSS processor.\n2. Process CSS through this processor.\n\nFunction `autoprefixer(options)` returns new PostCSS plugin:\n\n```js\nvar plugin = autoprefixer({ browsers: ['> 1%', 'IE 7'], cascade: false });\n```\n\nThere are 4 options:\n\n* `browsers` (array): list of browsers, which are supported in your project.\n  You can directly specify browser version (like `iOS 7`) or use selections\n  (like `last 2 version` or `> 5%`). See [Browserslist docs] for available\n  queries and default value.\n* `cascade` (boolean): should Autoprefixer uses [Visual Cascade],\n  if CSS is uncompressed. Default: `true`\n* `add` (boolean): should Autoprefixer add prefixes. Default is `true`.\n* `remove` (boolean): should Autoprefixer [remove outdated] prefixes.\n  Default is `true`.\n\nPlugin object has `info()` method for [debug purpose].\n\nYou can use PostCSS processor to process several CSS files\nto increase perfomance.\n\nSee [PostCSS API] for plugin usage documentation.\nSee all [PostCSS Runner Guidelines] for best practices.\n\n[PostCSS Runner Guidelines]: https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md\n[Browserslist docs]:         https://github.com/ai/browserslist\n[remove outdated]:           https://github.com/postcss/autoprefixer/#outdated-prefixes\n[Visual Cascade]:            https://github.com/postcss/autoprefixer#visual-cascade\n[debug purpose]:             #debug\n[PostCSS API]:               https://github.com/postcss/postcss/blob/master/docs/api.md\n\n## CSS Processing\n\nMethod `process(css, opts)` from Autoprefixer processor is a PostCSS’s method.\n\nYou must set `from` and `to` options with file names to generates corrects\nsource maps and useful error messages.\n\nOptions:\n\n* `from` (path): file path to origin CSS files.\n* `to` (path): file path to future CSS file, which will\n  contain processed CSS with prefixes.\n* `safe` (boolean): enables [Safe Mode] in PostCSS. By default `false`.\n* `map` contains options for source maps:\n\n  * `inline: false` to force save map to separated file, instead of inline it\n    to CSS in special comment by base64.\n  * `prev` (string or object): map content from previous processing step\n    (like Sass compilation).\n\n  If you set `map: false`, PostCSS will remove source map.\n\nYou can read more about the source map options in [PostCSS documentation].\n\n[PostCSS documentation]: https://github.com/postcss/postcss#source-map\n[Safe Mode]:             https://github.com/postcss/postcss#safe-mode\n\n## PostCSS Chain\n\nYou parse CSS only once and then process it through array of PostCSS processors.\n\nFor example, you can use [gulp-postcss]:\n\n```js\nvar postcss    = require('gulp-postcss');\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.task('css', function () {\n    var processors = [\n        require('autoprefixer')('last 1 version'),\n        require('css-mqpacker'),\n        require('csswring')\n     ];\n     return gulp.src('./src/style.css')\n        .pipe(sourcemaps.init())\n        .pipe(postcss(processors))\n        .pipe(sourcemaps.write('.'))\n        .pipe(gulp.dest('./dest'));\n});\n```\n\n[gulp-postcss]: https://github.com/w0rm/gulp-postcss\n\n## Safe Mode\n\nPostCSS has a special safe mode to parse broken CSS. If you set the `safe: true`\noption to the `process` method, it will  parse `a {` as `a {}`:\n\n```js\nautoprefixer.process('a {');                 // will throw “Unclosed block”\nautoprefixer.process('a {', { safe: true }); // will process as a closed block\n```\n\nIt is useful for legacy code when using several hacks, or interactive\ntools with live input, like [Autoprefixer demo].\n\n[Autoprefixer demo]: http://simevidas.jsbin.com/gufoko/quiet\n\n## Debug\n\nYou can check which browsers are selected and which properties will be prefixed:\n\n```js\ninfo = autoprefixer({ browsers: ['last 1 version'] }).info();\nconsole.log(info);\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/autoprefixer-core/issues"
  },
  "homepage": "https://github.com/postcss/autoprefixer-core#readme",
  "_id": "autoprefixer-core@5.2.1",
  "_shasum": "e640c414ae419aae21c1ad43c8ea0f3db82a566d",
  "_resolved": "http://registry.npmjs.org/autoprefixer-core/-/autoprefixer-core-5.2.1.tgz",
  "_from": "autoprefixer-core@>=5.2.1 <6.0.0"
}
