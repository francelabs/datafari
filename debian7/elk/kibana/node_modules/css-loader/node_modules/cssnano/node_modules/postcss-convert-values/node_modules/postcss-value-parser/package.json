{
  "name": "postcss-value-parser",
  "version": "1.4.2",
  "description": "Transforms css values and at-rule params into the tree",
  "main": "lib/parser.js",
  "files": [
    "lib"
  ],
  "devDependencies": {
    "eslint": "^1.1.0",
    "tape": "^4.2.0"
  },
  "scripts": {
    "test": "eslint lib test && tape test/*.js"
  },
  "author": {
    "name": "Bogdan Chadkin",
    "email": "trysound@yandex.ru"
  },
  "license": "MIT",
  "homepage": "https://github.com/TrySound/postcss-value-parser",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TrySound/postcss-value-parser.git"
  },
  "keywords": [
    "postcss",
    "value",
    "parser"
  ],
  "bugs": {
    "url": "https://github.com/TrySound/postcss-value-parser/issues"
  },
  "readme": "[![Travis CI](https://travis-ci.org/TrySound/postcss-value-parser.svg)](https://travis-ci.org/TrySound/postcss-value-parser)\n\n# postcss-value-parser\n\nTransforms css values and at-rule params into the tree\n\n## Usage\n\n```js\nvar parser = require('postcss-value-parser');\n\n/*{\n    nodes: [\n      type: 'function',\n      value: 'rgba',\n      nodes: [\n        { type: 'word', value: '233' },\n        { type: 'div', value: ',', before: '', after: ' ' },\n        { type: 'word', value: '45' },\n        { type: 'div', value: ',', before: '', after: ' ' },\n        { type: 'word', value: '66' },\n        { type: 'div', value: ',', before: ' ', after: '' },\n        { type: 'word', value: '.5' }\n      ]\n    ]\n  }*/\nparser('rgba(233, 45, 66 ,.5)')\n  .walk('rgba', function (fn) {\n    var color = fn.filter(function (node) {\n      return node.type === 'word';\n    }); // [233, 45, 66, .5]\n    fn.type = 'word';\n    fn.value = convertToHex(color);\n  })\n  .toString();\n  // #E92D42\n```\n\n### Prevent walking into function\n\n```js\nparser('url(some url) 50% 50%')\n  .walk(function (node) {\n    // Your code\n\n    if(node.type === 'functon' && node.value === 'url') {\n      return false;\n    }\n  })\n  .toString();\n```\n\n## Node types\n\n- `{ type: 'word', value: 'any' }`\n- `{ type: 'string', value: 'string', quote: '\"' || '\\'' }`\n- `{ type: 'div', value: '/' || ',' || ':', before: ' ', after: ' ' }`\n- `{ type: 'space', value: ' ' }` space as a separator\n- `{ type: 'function', value: 'name', nodes: [] }`\n\n## API\n\n```\nvar parser = require('postcss-value-parser');\n```\n\n### parser.unit(value)\n\nReturns parsed value\n\n```js\n// .2rem\n{\n  number: '.2',\n  unit: 'rem'\n}\n```\n\n### parser.trim(nodes)\n\nTrims space nodes (modifies original array and returns reference on it)\n\n### parser.stringify(nodes)\n\nStringifies node and array of nodes\n\n### var p = parser(value)\n\nReturns parsed tree\n\n### p.nodes\n\nRoot nodes list\n\n### p.toString()\n\nStringify tree to the value\n\n### p.walk([name, ]cb[, reverse])\n\n- `name` value filter\n- `cb(node, index, nodes)`\n- `reverse` walk to the deepest functions firstly\n\n# License\n\nMIT Â© [Bogdan Chadkin](mailto:trysound@yandex.ru)\n",
  "readmeFilename": "README.md",
  "_id": "postcss-value-parser@1.4.2",
  "_shasum": "1865633e13701f8a721e7834dad185cb144aad0c",
  "_resolved": "http://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-1.4.2.tgz",
  "_from": "postcss-value-parser@>=1.1.0 <2.0.0"
}
