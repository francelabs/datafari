{
  "name": "imports-loader",
  "version": "0.6.4",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "description": "imports loader module for webpack",
  "dependencies": {
    "loader-utils": "0.2.x",
    "source-map": "0.1.x"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/imports-loader.git"
  },
  "readme": "# imports loader for webpack\r\n\r\nCan be used to inject variables into the scope of a module. This is especially useful if third-party modules are relying on global variables like `$` or `this` being the `window` object.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install imports-loader\r\n```\r\n\r\n## Usage\r\n\r\nGiven you have this file `example.js`\r\n\r\n```javascript\r\n$(\"img\").doSomeAwesomeJqueryPluginStuff();\r\n```\r\n\r\nthen you can inject the `$` variable into the module by configuring the imports-loader like this:\r\n\r\n``` javascript\r\nrequire(\"imports?$=jquery!./example.js\");\r\n```\r\n\r\nThis simply prepends `var $ = require(\"jquery\");` to `example.js`.\r\n\r\n### Syntax\r\n\r\nQuery value | Equals\r\n------------|-------\r\n`angular` |Â `var angular = require(\"angular\");`\r\n`$=jquery` | `var $ = require(\"jquery\");`\r\n`define=>false` | `var define = false;`\r\n`config=>{size:50}` | `var config = {size:50};`\r\n`this=>window` | `(function () { ... }).call(window);`\r\n\r\n### Multiple values\r\n\r\nMultiple values are separated by comma `,`:\r\n\r\n```javascript\r\nrequire(\"imports?$=jquery,angular,config=>{size:50}!./file.js\");\r\n```\r\n\r\n### webpack.config.js\r\n\r\nAs always, you should rather configure this in your `webpack.config.js`:\r\n\r\n```javascript\r\n// ./webpack.config.js\r\n\r\nmodule.exports = {\r\n    ...\r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: require.resolve(\"some-module\")\r\n                loader: \"imports?this=>window\"\r\n            }\r\n        ]\r\n};\r\n```\r\n\r\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\r\n\r\n## Typical use-cases\r\n\r\n### jQuery plugins\r\n\r\n`imports?$=jquery`\r\n\r\n### Custom Angular modules\r\n\r\n`imports?angular`\r\n\r\n### Disable AMD\r\n\r\nThere are many modules that check for a `define` function before using CommonJS. Since webpack is capable of both, they default to AMD in this case, which can be a problem if the implementation is quirky.\r\n\r\nThen you can easily disable the AMD path by writing\r\n\r\n```javascript\r\nimports?define=>false\r\n```\r\n\r\nFor further hints on compatibility issues, check out [Shimming Modules](http://webpack.github.io/docs/shimming-modules.html) of the official docs.\r\n\r\n## License\r\n\r\nMIT (http://www.opensource.org/licenses/mit-license.php)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/webpack/imports-loader/issues"
  },
  "homepage": "https://github.com/webpack/imports-loader#readme",
  "_id": "imports-loader@0.6.4",
  "_shasum": "2179421d9b9745f08d0e6a401a5c09b376e2acbb",
  "_resolved": "http://registry.npmjs.org/imports-loader/-/imports-loader-0.6.4.tgz",
  "_from": "imports-loader@0.6.4"
}
